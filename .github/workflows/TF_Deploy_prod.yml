# This workflow runs Terraform CLI containerized, configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, validate, fmt, and terraform plan. 
# `terraform apply` will be executed: 
# -- On manual run if input parameter is yes
# -- On push events to the main branch, if environment is prod

name: TF_Deploy_prod
on:
  push:
    branches: [ main,'dev','prod']
    paths: 
      - '**.tf'
      - '**.tfvars'
 
  pull_request:
   # types: [ 'labeled','opened','synchronize','reopened']
    branches: [ 'main','dev','prod' ]
    paths: 
      - '**.tf'
      - '**.tfvars'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      runapply:
        description: 'Enter yes or no if apply should be run'
        required: true
        default: 'No'
    
    #${{ github.event.inputs.runapply =='' }}

#==============================
# Variable section
#==============================
env:
  PROJECT_ID: ${{ secrets.G_PROJ }}
  SERVICE_ACCOUNT: ${{ secrets.G_INFO }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_CLUSTER: gke-ycit-tformers-default-prod #TODO grab terraform output, meantime add value here
  GKE_REGION: us-central1
  APP_REPO_OWNER: Vidinci
  APP_REPO_NAME: realworld-test-cm
  IMAGE: react-redux
  DEPLOYMENT_NAME: react-redux
  CHART_PATH: helmchartLab9/realworldchart    #path exists in the realworld repository, realworldchart folder contains the value.yml and chart.yml files
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:         
  build:
    name: 'TF_prepare'
    runs-on: ubuntu-latest
    environment: prod

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
        #====================================#
        # Checkout the repository to the GitHub Actions runner
        #====================================#
      - name: Checkout
        uses: actions/checkout@v2
      
        #====================================#
        # Build required info in TF files
        #====================================#
      - name: Setup gcp info
        env:
          G_PROJ: ${{ secrets.G_PROJ }}
          G_B_ACT: ${{ secrets.G_B_ACT }}
        run: |
          cat << EOF >> ./run-modules/create-gke/terraform.tfvars
          
          gcp_project_id  = "$G_PROJ"
          billing_account = "$G_B_ACT"
          EOF
    
        #====================================#
        # Build required info for TF Container
        #====================================#
      - name: Setup TF token
        env:
          TFE_TOKEN: ${{ secrets.TFE_INFO }}
        run: |
          cat << EOF > ./run-modules/create-gke/.terraformrc
          {"credentials": {"app.terraform.io": {"token": "$TFE_TOKEN"}}}
          EOF
          
      #- run: cat ./run-modules/create-gke/.terraformrc

        #====================================#
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        #====================================#
      - name: Terraform init
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.G_INFO }}       
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init
          
        #====================================#
        # Terraform validate: Runs terraform validate
        #====================================#
      - name: Terraform validate
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.G_INFO }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ validate
        
       #====================================#
       # Terraform format
       #====================================#
      - name: Terraform format
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ fmt

       #====================================#
       # Linting of TF code
       # Runs a container from ghcr.io, version v0.33.1
       #====================================#
      - name: Linting of Terraform files
        uses: terraform-linters/tflint-bundle@v0.33.1
        # here are some options: loglevel to provide visibility, disable 1 TFLint default rule that was giving us Warning, and manually specify the location in the repo for TF files
        with:
          args: --ignore-module=SOURCE --loglevel=info --disable-rule=terraform_deprecated_interpolation ./run-modules/create-gke/

  terraform_plan:
  #if prebuildcheck passes, do TF plan
   name: 'TF_plan'
   runs-on: ubuntu-latest
   environment: prod
   needs: build
   steps:
        #====================================#
        # Checkout the repository to the GitHub Actions runner
        #====================================#
      - name: Checkout
        uses: actions/checkout@v2
      
        #====================================#
        # Build required info in TF files
        #====================================#
      - name: Setup gcp info
        env:
          G_PROJ: ${{ secrets.G_PROJ }}
          G_B_ACT: ${{ secrets.G_B_ACT }}
        run: |
          cat << EOF >> ./run-modules/create-gke/terraform.tfvars
          
          gcp_project_id  = "$G_PROJ"
          billing_account = "$G_B_ACT"
          EOF
      
        #====================================#
        # Build required info for TF Container
        #====================================#
      - name: Setup TF token
        env:
          TFE_TOKEN: ${{ secrets.TFE_INFO }}
        run: |
          cat << EOF > ./run-modules/create-gke/.terraformrc
          {"credentials": {"app.terraform.io": {"token": "$TFE_TOKEN"}}}
          EOF
        #====================================#
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        #====================================#
      - name: Terraform init
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.G_INFO }}       
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init
          
        #====================================#
        # Terraform plan : Generates an execution plan for Terraform
        #====================================#
      - name: Terraform plan
        id: plan
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ plan
          
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform_apply:
  #if build and plan pass, do TF apply
   name: 'TF_apply'
   runs-on: ubuntu-latest
   environment: prod
   needs: terraform_plan
   if: (${{ github.event.inputs.runapply == 'yes' }})
   steps:

       # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      
        #====================================#
        # Build required info in TF files
        #====================================#
      - name: Setup gcp info
        env:
          G_PROJ: ${{ secrets.G_PROJ }}
          G_B_ACT: ${{ secrets.G_B_ACT }}
        run: |
          cat << EOF >> ./run-modules/create-gke/terraform.tfvars
          
          gcp_project_id  = "$G_PROJ"
          billing_account = "$G_B_ACT"
          EOF
      
        #====================================#
        # Build required info for TF Container
        #====================================#
      - name: Setup TF token
        env:
          TFE_TOKEN: ${{ secrets.TFE_INFO }}
        run: |
          cat << EOF > ./run-modules/create-gke/.terraformrc
          {"credentials": {"app.terraform.io": {"token": "$TFE_TOKEN"}}}
          EOF
          
       #====================================#
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        #====================================#
      - name: Terraform init
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.G_INFO }}       
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ init
          
        #====================================#
        # Terraform plan : Generates an execution plan for Terraform
        #====================================#
      - name: Terraform apply auto
        id: apply
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push')
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ apply -auto-approve
      
      - name: Terraform apply manual
        id: apply_manual
        if: ${{ github.event.inputs.runapply == 'yes' }}
        uses: docker://ghcr.io/ycit-team-terraformers/terraformers:v1
        env:
           TF_CLI_CONFIG_FILE: ./run-modules/create-gke/.terraformrc
           GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          entrypoint: terraform
          args: -chdir=./run-modules/create-gke/ apply -auto-approve
      
      - name: Terraform apply_auto Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

      - name: Terraform apply_manual Status
        if: steps.apply_manual.outcome == 'failure'
        run: exit 1
  
  Install_app_realworld:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: terraform_apply
    environment: prod
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: 'Main Code checkout'
        uses: actions/checkout@v2
     
     # Requires you create a GitHub personal Token 
     # https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
     
        #====================================
        # Clone repo having the Real World app
        #====================================
      - name: Get RealWorld app from its repo
        uses: GuillaumeFalourd/clone-github-repo-action@v1
        with:
          owner: 'Vidinci' 
          repository: 'realworld-test-cm'
          access-token: ${{ secrets.PAT }}  
      
        #====================================
        # Setup gcloud CLI
        #====================================      
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.G_INFO }}
          project_id: ${{ secrets.G_PROJ }}

       # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker
        #====================================
        # Build the Docker image, for the real world app react-redux then push to the GC Registry
        # Change the path to the location of the docker file 
        # Ex. in following command the Dockerfile is retrieved from the cloned repo under a folder named react-redux (same name as image name, it could have been different)
        #====================================      
      - name: Build
        run: |-
          docker build \
           --tag "gcr.io/${{ secrets.G_PROJ }}/$IMAGE:$GITHUB_SHA" \
           --build-arg GITHUB_SHA="$GITHUB_SHA" \
           --build-arg GITHUB_REF="$GITHUB_REF" \
           ./$APP_REPO_NAME/$IMAGE
        # Push the Docker image to Google Container Registry, for the real world app react-redux
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
        #====================================
        # Install realworld app helm chart
        #====================================      
      - name: Install Helm chart react_redux
        uses: hahow/install-helm-chart-action@v1.0.3
        with:
          gcloud_auth_key: ${{ secrets.G_INFO }}
          gcloud_project_id: ${{ secrets.G_PROJ }}
          cluster_name: ${{ env.GKE_CLUSTER }}  #'gke-tformers-tformers-default-dev'
          cluster_region: ${{ env.GKE_REGION }} # us-central1
          release_namespace: default
          release_name: ${{ env.DEPLOYMENT_NAME }} #react-redux
          chart_name: ./${{ env.APP_REPO_NAME }}/${{ env.CHART_PATH }}  #./charts/realworldchart
          helm_upgrade_args: |
               --set=image.tag=v2
           #  --set=image.tag=${{ env.GITHUB_SHA }}
      # Get info about the services deployed
      - name: Service info IP and port
        run: |
          echo "Use External IP and port 4100 to acces the application from the browser. ex. http://IP:4100"
          gcloud container clusters get-credentials $GKE_CLUSTER \
          --region $GKE_REGION \
          --project ${{ secrets.G_PROJ }}
          kubectl get services -o wide  
